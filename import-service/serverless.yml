service: rsschool-import-service

provider:
  name: aws
  runtime: nodejs12.x
  stage: dev
  region: eu-west-1
  timeout: 10
  memorySize: 256
  apiGateway:
    minimumCompressionSize: 1024

  tracing:
    apiGateway: true
    lambda: true

  iamRoleStatements:
    - Effect: Allow
      Action:
        - s3:ListBucket
      Resource:
        - arn:aws:s3:::${self:service}

    - Effect: Allow
      Action:
        - s3:*
      Resource:
        - arn:aws:s3:::${self:service}/*

    - Effect: Allow
      Action:
        - sqs:*
      Resource:
        - ${cf:rsschool-product-service-dev.SharedCatalogItemsQueueArn}

  environment:
    BUCKET_NAME: ${self:service}
    SQS_PRODUCT_URL: ${cf:rsschool-product-service-dev.SharedCatalogItemsQueueUrl}

package:
  individually: true

plugins:
  - serverless-webpack
  - serverless-offline
  - serverless-jest-plugin

custom:
  webpack:
    webpackConfig: 'webpack.config.js'
    includeModules: true
    keepOutputDirectory: true
    packager: 'npm'

functions:
  importProductsFile:
    handler: handler.importProductsFile
    events:
      - http:
          path: import
          method: get
          cors: true
          authorizer:
            type: TOKEN
            name: AuthForImportService
            identitySource: method.request.header.Authorization
            resultTtlInSeconds: 0
            arn: ${cf:rsschool-authorization-service-dev.SharedBasicAuthArn}

          request:
            parameters:
              querystrings:
                name: true
  
  importsFileParser:
    handler: handler.importsFileParser
    events:
      - s3:
          bucket: ${self:provider.environment.BUCKET_NAME}
          event: s3:ObjectCreated:*
          rules:
            - prefix: uploaded/
          existing: true
  
resources:
  Resources:
    # -> https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-s3-bucket.html
    CSVBucket:
      Type: AWS::S3::Bucket
      Properties:
        AccelerateConfiguration: 
          AccelerationStatus: Suspended
        BucketName: ${self:provider.environment.BUCKET_NAME}
        CorsConfiguration: 
          CorsRules:
            - AllowedHeaders: ['*']
              AllowedMethods: [GET, PUT]
              AllowedOrigins: ['*']
              Id: CORSCSVBucketRule
              MaxAge: 10000

    ForbiddenGatewayResponse:
      Type: AWS::ApiGateway::GatewayResponse
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
        ResponseType: ACCESS_DENIED
        ResponseTemplates:
          application/json: |
            {
              "success": false,
              "message": "access denied"
            }
        RestApiId: !Ref ApiGatewayRestApi
        StatusCode: 403

    UnauthorizedGatewayResponse:
      Type: AWS::ApiGateway::GatewayResponse
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
        ResponseTemplates:
            application/json: |
              {
                "success": false,
                "message": "unauthorized"
              }
        ResponseType: UNAUTHORIZED
        RestApiId: !Ref ApiGatewayRestApi
        StatusCode: 401