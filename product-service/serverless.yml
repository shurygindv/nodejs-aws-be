service: rsschool-aws-product-service

provider:
  name: aws
  runtime: nodejs12.x
  stage: dev
  region: eu-west-1
  timeout: 10
  memorySize: 256
  apiGateway:
    shouldStartNameWithService: true
    minimumCompressionSize: 1024
    binaryMediaTypes:
      - '*/*'
      - 'image/jpeg'
  tracing:
    apiGateway: true
    lambda: true

plugins:
  - serverless-jest-plugin
  - serverless-webpack
  - serverless-dotenv-plugin
#  - serverless-vpc-plugin TODO: later

custom:
  # DB
  RDS_PG: 
    DB_NAME: ${env:PG_DB_NAME}
    DB_MASTER_USERNAME: ${env:PG_DB_USERNAME}
    DB_MASTER_PASSWORD: ${env:PG_DB_PASSWORD}

    DB_CONSOLE_NAME: db-${self:custom.RDS_PG.DB_NAME}-${opt:stage, self:provider.stage}
    SUBNET_REGION_A: ${self:provider.region}a
    SUBNET_REGION_B: ${self:provider.region}b

  webpack:
    webpackConfig: 'webpack.config.js'
    includeModules: true
    keepOutputDirectory: true
    packager: 'npm'

functions:
  getStaticAsset:
    handler: handler.getStaticAsset
    events:
      - http:
          path: static/{file}
          method: get
          cors: true

  getAllProducts:
    handler: handler.getAllProducts
    events:
      - http:
          path: products
          method: get
          cors: true
  
  getProductById:
    handler: handler.getProductById
    events:
      - http:
          path: products/{productId}
          method: get
          cors: true
          request: 
            parameters: 
              paths: 
                productId: true


# TODO: bastion host
resources:
  Resources:
    # -> https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-vpc.html
    ServerlessVPC: 
      Type: AWS::EC2::VPC
      Properties:
        CidrBlock: 10.0.0.0/16
        EnableDnsSupport: true
        EnableDnsHostnames: true
        InstanceTenancy: default

    # -> https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-security-group.html
    ServerlessRDSSecurityGroup:
      DependsOn: ServerlessVPC

      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupName: "RSSchool test security group"
        GroupDescription: "allow all traffic TCP/IP; TODO: limit, trusted"
        VpcId:
          Ref: ServerlessVPC
        SecurityGroupIngress:
        - IpProtocol: tcp
          CidrIp: 0.0.0.0/0
          FromPort: 5432
          ToPort: 5432

    # -> https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-internetgateway.html
    ServerlessInternetGateway: 
        Type: AWS::EC2::InternetGateway
        Properties:
          Tags:
            - Key: "Name"
              Value: "InternetGateway"

    #: -> https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-subnet.html
    ServerlessSubnetA: 
      DependsOn: ServerlessVPC
      Type: AWS::EC2::Subnet
      Properties:
        VpcId:
          Ref: ServerlessVPC
        AvailabilityZone: ${self:custom.RDS_PG.SUBNET_REGION_A}
        CidrBlock: 10.0.0.0/24
    ServerlessSubnetB: 
      DependsOn: ServerlessVPC
      Type: AWS::EC2::Subnet
      Properties:
        VpcId:
          Ref: ServerlessVPC
        AvailabilityZone: ${self:custom.RDS_PG.SUBNET_REGION_B}
        CidrBlock: 10.0.1.0/24

    # -> https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-rds-dbsubnet-group.html
    ServerlessSubnetGroup:
      Type: AWS::RDS::DBSubnetGroup
      Properties:
        DBSubnetGroupName: rdssubnets
        DBSubnetGroupDescription: United RDS Subnets
        SubnetIds:
          - Ref: ServerlessSubnetA
          - Ref: ServerlessSubnetB

    ServerlessPostgreGAVPC:
      # -> https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-vpc-gateway-attachment.html
      Type: AWS::EC2::VPCGatewayAttachment
      Properties:
          VpcId:
            Ref: ServerlessVPC
          InternetGatewayId:
            Ref: ServerlessInternetGateway
          
    # -> https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/quickref-rds.html
    ServerlessPostgreRDS: 
      DependsOn: ServerlessPostgreGAVPC

      Type: AWS::RDS::DBInstance
      DeletionPolicy: Snapshot
      Properties:
        Engine: postgres
        EngineVersion: "12.3"
        DBInstanceClass: db.t2.micro
        DBInstanceIdentifier: ${self:custom.RDS_PG.DB_CONSOLE_NAME}
        DBName: ${self:custom.RDS_PG.DB_NAME}
        Port: 5432
        MasterUsername:  ${self:custom.RDS_PG.DB_MASTER_USERNAME}
        MasterUserPassword:  ${self:custom.RDS_PG.DB_MASTER_PASSWORD}
        AllocatedStorage: '20'
        StorageType: gp2
        BackupRetentionPeriod: 7
        PubliclyAccessible: true ## <--- !
        DeletionProtection: false
        AutoMinorVersionUpgrade: true
        EnablePerformanceInsights: true
        EnableIAMDatabaseAuthentication: false ## e.g IAM role has access only to specific tableName
        DBSubnetGroupName:
          Ref: ServerlessSubnetGroup
        VPCSecurityGroups: 
          - !GetAtt ServerlessRDSSecurityGroup.GroupId

        