service: rsschool-product-service

provider:
  name: aws
  runtime: nodejs12.x
  stage: dev
  region: eu-west-1
  timeout: 10
  memorySize: 256
  apiGateway:
    shouldStartNameWithService: true
    minimumCompressionSize: 1024
    binaryMediaTypes:
      - '*/*'
      - 'image/jpeg'
  tracing:
    apiGateway: true
    lambda: true

  iamRoleStatements:
    - Effect: Allow
      Action:
        - sqs:*
      Resource:
        - !GetAtt CatalogItemsQueue.Arn

    - Effect: Allow
      Action:
        - sns:*
      Resource:
        - !Ref CreateProductTopic

  environment:
    PG_HOST: !GetAtt ServerlessPostgreRDS.Endpoint.Address
    PG_PORT: ${env:PG_DB_PORT}
    PG_DATABASE: ${env:PG_DB_NAME}
    PG_USERNAME: ${env:PG_DB_USERNAME}
    PG_PASSWORD: ${env:PG_DB_PASSWORD}

    PRODUCT_TOPIC_ARN: !Ref CreateProductTopic

plugins:
  - serverless-jest-plugin
  - serverless-webpack
  - serverless-dotenv-plugin
  - serverless-offline
  - serverless-aws-documentation
#  - serverless-vpc-plugin TODO: later

custom:
  # DB
  RDS: 
    DB_INSTANCE_NAME: db-${self:provider.environment.PG_DATABASE}-${opt:stage, self:provider.stage}
    SUBNET_REGION_A: ${self:provider.region}a
    SUBNET_REGION_B: ${self:provider.region}b

  webpack:
    webpackConfig: 'webpack.config.js'
    includeModules: true
    keepOutputDirectory: true
    packager: 'npm'

  dotenv:
    required:
      file: true

functions:
  catalogBatchProcess:
    handler: handler.catalogBatchProcess
    events:
      - sqs:
          arn: !GetAtt CatalogItemsQueue.Arn
          batchSize: 5

  serveStaticAsset:
    handler: handler.serveStaticAsset
    events:
      - http:
          path: static/{file}
          method: get
          cors: true

  createProduct:
    handler: handler.createProduct
    events:
      - http:
          path: products
          method: post
          cors: true
          request:
            schema:
              application/json: ${file(validation/create_product.json)}

  getAllProducts:
    handler: handler.getAllProducts
    events:
      - http:
          path: products
          method: get
          cors: true
  
  getProductById:
    handler: handler.getProductById
    events:
      - http:
          path: products/{productId}
          method: get
          cors: true
          request: 
            parameters: 
              paths: 
                productId: true

resources:
  Outputs:
    SharedCatalogItemsQueueUrl:
      Value: !Ref CatalogItemsQueue
      Export:
        Name: SharedCatalogItemsQueueUrl
    SharedCatalogItemsQueueArn:
      Value: !GetAtt CatalogItemsQueue.Arn
      Export:
        Name: SharedCatalogItemsQueueArn

  Resources:
    CatalogItemsQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: catalog-items-queue
        DelaySeconds: 10

    CreateProductTopic:
      Type: AWS::SNS::Topic
      Properties:
        DisplayName: notify by email when adding new product
        TopicName: create-product-topic

    createProductEmailSubscription:
      Type: AWS::SNS::Subscription
      Properties:
        TopicArn: !Ref CreateProductTopic
        Protocol: email
        Endpoint: Daniil_Shurygin@epam.com



    # -> setup for Postgre DB VPC (gateway, subnets..), 
    # todo: 1. maybe prefix DB-Postgre 2. bastion ssh host for db server access
    ServerlessVPC: ${file(./resource/ServerlessVPC.yml)}
    ServerlessRDSSecurityGroup: ${file(./resource/ServerlessRDSSecurityGroup.yml)}
    ServerlessInternetGateway: ${file(./resource/ServerlessInternetGateway.yml)}
    ServerlessSubnetA: ${file(./resource/ServerlessSubnetA.yml)}
    ServerlessSubnetB: ${file(./resource/ServerlessSubnetB.yml)}
    ServerlessSubnetGroup: ${file(./resource/ServerlessSubnetGroup.yml)}
    ServerlessPostgreGAVPC: ${file(./resource/ServerlessPostgreGAVPC.yml)}
    ServerlessPostgreRDS: ${file(./resource/ServerlessPostgreRDS.yml)}

        